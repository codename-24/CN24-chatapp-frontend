{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","spacing","id","size","focusBorderColor","value","height","type","placeholder","onChange","e","target","width","_focus","color","variant","h","border","onClick","_hover","bg","style","marginTop","isLoading","borderColor","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","description","response","message","marginBottom","isRequired","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","_selected","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","lastTypingTime","Date","getTime","setTimeout","ArrowRight","Chatbox","ChatLoading","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b171427.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { color, useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"😡 Fill in all the fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"😎 Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"😒 Error Occured!\",\r\n        \r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"20px\" >\r\n      <FormControl id=\"email\">\r\n        <FormLabel></FormLabel>\r\n        <InputGroup size=\"lg\"  >\r\n        <Input focusBorderColor=\"darkgoldenrod\"\r\n          value={email}\r\n          height=\"60px\"\r\n          \r\n          type=\"email\"\r\n          placeholder=\"E-mail\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\">\r\n        <FormLabel></FormLabel>\r\n        <InputGroup size=\"lg\">\r\n          <Input\r\n          focusBorderColor=\"darkgoldenrod\"\r\n            value={password}\r\n            height=\"60px\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement  width=\"4.5rem\">\r\n            <Button _focus=\" \" color=\"darkgoldenrod\" variant=\"outline\" h=\"1.75rem\" border=\"none\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button _hover={{ bg: 'black', color:\"darkgoldenrod\"}}\r\n        bg=\"#333\"\r\n        color=\"white\"\r\n        width=\"80%\"\r\n        height=\"40px\"\r\n\r\n        style={{ marginTop: 55 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button _hover={{ bg: 'darkgoldenrod', color:\"black\"}}\r\n        variant=\"outline\"\r\n        borderColor=\"darkgoldenrod\"\r\n        color=\"darkgoldenrod\"\r\n        width=\"80%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@c24.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"😡 Fill in all the fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"😡 Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"😎 Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"😒 Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"😒 Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"codename24-chatapp\");\r\n      data.append(\"cloud_name\", \"codename24-cloud\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/codename24-cloud/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"😒 Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\">\r\n  \r\n        <Input\r\n        focusBorderColor=\"darkgoldenrod\"\r\n        height=\"50px\"\r\n        marginBottom=\"15px\"\r\n          placeholder=\"Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <Input\r\n        focusBorderColor=\"darkgoldenrod\"\r\n        height=\"50px\"\r\n        marginBottom=\"15px\"\r\n          type=\"email\"\r\n          placeholder=\"E-mail\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\">\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n          focusBorderColor=\"darkgoldenrod\"\r\n        height=\"50px\"\r\n        marginBottom=\"15px\"\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button _focus=\"red\" color=\"darkgoldenrod\" variant=\"outline\" h=\"1.75rem\" border=\"none\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n \r\n        <InputGroup size=\"md\">\r\n          <Input\r\n          marginBottom=\"15px\"\r\n          focusBorderColor=\"darkgoldenrod\"\r\n        height=\"50px\"\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button _focus=\"red\" color=\"darkgoldenrod\" variant=\"outline\" h=\"1.75rem\" border=\"none\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n        marginBottom=\"15px\"\r\n        focusBorderColor=\"darkgoldenrod\"\r\n        height=\"50px\"\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button _hover={{ bg: 'black', color:\"darkgoldenrod\"}}\r\n        bg=\"#333\"\r\n        color=\"white\"\r\n        width=\"80%\"\r\n        height=\"50px\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Codename-24\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"enclosed\"  >\r\n          <TabList mb=\"1em\">\r\n            <Tab _selected={{ color: 'darkgoldenrod'}}>Login</Tab>\r\n            <Tab _selected={{ color: 'darkgoldenrod'}}>Register</Tab>\r\n          </TabList>\r\n          <TabPanels >\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport { ArrowRightIcon } from '@chakra-ui/icons'\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://codename24-messenger.herokuapp.com\"; // \r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😒 Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          variant:\"subtle\",\r\n          title: \"😒 Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"white\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    height={20}\r\n                    width={40}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <InputGroup size=\"lg\">\r\n              <Input\r\n                variant=\"filled\"\r\n                focusBorderColor=\"darkgoldenrod\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n              <InputRightElement children={<ArrowRightIcon color=\"darkgoldenrod\" onClick={sendMessage}/>} />\r\n              </InputGroup>\r\n              \r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"28px\"\r\n            color=\"darkgoldenrod\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"22px\", md: \"26px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"darkgoldenrod\" : \"#333\"\r\n                }`,\r\n                color: `${\r\n                  m.sender._id === user._id ? \"black\" : \"darkgoldenrod\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={10}\r\n      bg=\"#333\"\r\n      color=\"darkgoldenrod\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({user, handleFunction }) => {\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#333\",\r\n        color: \"darkgoldenrod\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😒 User already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😡 Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😡 Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                bg=\"#333\"\r\n                color=\"darkgoldenrod\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} bg=\"darkgoldenrod\" color=\"white\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    \r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={5}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"75%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n    \r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"🤨 User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😒 Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😡 Fill all the fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😎 New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"😒 Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"20px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                focusBorderColor=\"darkgoldenrod\"\r\n                height=\"50px\"\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                focusBorderColor=\"darkgoldenrod\"\r\n                height=\"50px\"\r\n                placeholder=\"Add Users...\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button _hover={{ bg: 'black', color:\"darkgoldenrod\"}} _focus=\" \" color=\"darkgoldenrod\" variant=\"outline\" onClick={handleSubmit} >\r\n              Create\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"😒 Error Occured!\",\r\n        description: \"Failed to load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"28%\" }}\r\n      borderRadius=\"lg\"\r\n      \r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"28px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        Chats\r\n        <GroupChatModal>\r\n          <Button  _focus=\" \" color=\"darkgoldenrod\" variant=\"outline\"\r\n            _hover={{ bg: 'black', color:\"darkgoldenrod\"}}\r\n            d=\"flex\"\r\n            fontSize={{ base: \"14px\", md: \"10px\", lg: \"14px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#333\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"darkgoldenrod\" : \"black\"}\r\n                px={5}\r\n                py={3}\r\n                borderRadius=\"lg\"\r\n                key={chat?._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name}    </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        variant: \"subtle\",\r\n        title: \"😒 Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        variant: \"subtle\",\r\n        title: \"😒 Error Occured!\",\r\n        description: \"Failed to load Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    //console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        variant:\"subtle\",\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n      >\r\n        <Tooltip label=\"Find users to start chatting\" hasArrow placement=\"bottom-end\">\r\n          <Button _focus=\" \" color=\"black\" variant=\"outline\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              \r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          C24-Messenger\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No notifications\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New message in ${notif.chat.chatName}`\r\n                    : `New message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"0px\" color=\"#333\" >Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                focusBorderColor=\"darkgoldenrod\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button bg=\"#333\" color=\"white\" _hover={{ bg: 'black', color:\"darkgoldenrod\"}} onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}